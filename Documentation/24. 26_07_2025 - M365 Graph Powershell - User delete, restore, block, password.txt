DELETING USERS on Graph PowerShell @ https://learn.microsoft.com/en-us/microsoft-365/enterprise/delete-and-restore-user-accounts-with-microsoft-365-powershell?view=o365-worldwide

- To start with, I logged in to mg-graph with the user.readwrite.all scope.

- The user with UPN ClaudeL@stcsolutions9.onmicrosoft.com was deleted with this command;

--------------------------------------------------------------------------
$userprincipalName="ClaudeL@stcsolutions9.onmicrosoft.com"
# Get the user
$userId = (Get-MgUser -Filter "userprincipalname eq '$userprincipalName'").Id
# Remove the user
Remove-MgUser -UserId $userId -Confirm:$false
---------------------------------------------------------------------------

- This could be done using a different user property, for example, to use display name, do;
	- Provide the display name of the user
	- filter the get-mguser result based on displayname eq <"provided display name">

- For this to run for multiple users, reading from a csv file or manually writing them in a script, a for loop could be added to loop the users.



RESTORE A USER

- I restored the just deleted user, ClaudeL@stcsolutions9.onmicrosoft.com

- the directory.readwrite.all scope is needed for this, bcos deleted accounts are no longer objects in the directory, they are in deleted 
- first step, we have to get the deleted objects by;

Note, this command generated all delected objects and their properties

---------------------------------------------------------------------------------------
$DeletedUsers = Get-MgDirectoryDeletedItem -DirectoryObjectId microsoft.graph.user -Property '*'
$DeletedUsers = $DeletedUsers.AdditionalProperties['value']
foreach ($deletedUser in $DeletedUsers)
{
   $deletedUser | Format-Table
}
------------------------------------------------------------------------------------------

- i noticed something. b4 now, i created a user multiple times and deleted multiple times, using the same details.
- the ID of this user (multiple times) were different when checked through the snippet above. 
- this means, you cannot recover a user (or an object) by the display name, but only by a unique identifier which is the ID.
- this is also another reason why user documentation is important (in case of deleted user with the same details), bcos one needs to know which ID to restore.

- i restored the last deleted user @ ClaudeL@stcsolutions9.onmicrosoft.com, i checked admin center to see when the user was deleted, the following snippet works;

--------------------------------------------------------------------------------------------
# Input user account ID
$userId = "f487fcf1-9e73-47f7-8296-87da8a925aed"
# Restore the user
Restore-MgDirectoryDeletedItem -DirectoryObjectId $userId
--------------------------------------------------------------------------------------------


BLOCK and UNBLOCK A USER @ https://learn.microsoft.com/en-us/microsoft-365/enterprise/block-user-accounts-with-microsoft-365-powershell?view=o365-worldwide

- i tried this on ClaudeL@stcsolutions9.onmicrosoft.com

- the scope; user.readwrite.all is needed for this;
- here i used the UPN to block and unblock the user
------------------------------------------------------------------------------------------

$params = @{
	accountEnabled = $true # $false for blocking, $true for unblocking
}
Update-MgUser -UserId "ClaudeL@stcsolutions9.onmicrosoft.com" -BodyParameter $params

------------------------------------------------------------------------------------------


- here, i used the Display Name to block and unblock the user
------------------------------------------------------------------------------------------

$userName="Claude Loiselle"
$user = Get-MgUser -Filter "displayName eq '$userName'"
$params = @{
	accountEnabled = $true # $false for blocking, $true for unblocking
}
Update-MgUser -UserId $user.Id -BodyParameter $params

------------------------------------------------------------------------------------------

Blocking and Unblocking MULTIPLE USERS

- i created a txt file, like this;

akol@stcsolutions9.onmicrosoft.com
tjohnston@stcsolutions9.onmicrosoft.com
kakers@stcsolutions9.onmicrosoft.com

- the snippet is below
------------------------------------------------------------------------------------------

$params = @{
	accountEnabled = $false #false for blocking, true for unblocking
}
Get-Content "path-to-file" | ForEach {Update-MgUser -UserId $_ -BodyParameter $params}

------------------------------------------------------------------------------------------

STATUS OF A USER (BLOCKED OR UNBLOCKED)

- i checked the status of ClaudeL@stcsolutions9.onmicrosoft.com (blocked or unblocked), specifying its UPN

Get-MgUser -UserId ClaudeL@stcsolutions9.onmicrosoft.com -Property "displayName,accountEnabled" | Select displayName, accountEnabled



MODIFYING PASSWORDS FOR USERS 

@ https://learn.microsoft.com/en-us/microsoft-365/enterprise/manage-passwords-with-microsoft-365-powershell?view=o365-worldwide

- the user.readwrite.all scope is needed for managing passwords

- i used this snippet below to change and force/unforce change password at next signin
# note, in ForceChangePasswordNextSignIn, set true to change password, set false not to change password. 
------------------------------------------------------------------------------------------

$userUPN="ClaudeL@stcsolutions9.onmicrosoft.com"
$newPassword="fdr<new fgthudpassword>123fGHT"
$secPassword = ConvertTo-SecureString $newPassword -AsPlainText -Force
Update-MgUser -UserId $userUPN -PasswordProfile @{ ForceChangePasswordNextSignIn = $true; Password = $newPassword }

------------------------------------------------------------------------------------------

- to change for bulk users.
- this snippet uses AD PowerShell modules, defaultly installed on Domain Controllers and RSAT installed computers.

- create a CSV file like this;

Username,Password,
user1,pass1,
user2,pass2

- run the snippet
------------------------------------------------------------------------------------------

Connect-AzureAD
 
Import-Csv -Path C:\Path\To\YourFile.csv | ForEach-Object {
    $username = $_.Username
    $password = $_.Password | ConvertTo-SecureString -AsPlainText -Force
    Set-ADAccountPassword -Identity $username -NewPassword $password -Reset
    Set-ADUser -Identity $username -ChangePasswordAtLogon $false
}
------------------------------------------------------------------------------------------